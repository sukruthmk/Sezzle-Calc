{"version":3,"sources":["context/CalculatorContext.js","config.js","components/Calculator/Calculator.js","components/Calculator/Result.js","components/Calculator/KeyPad.js","components/Result/DisplayCalculations.js","App.js","serviceWorker.js","index.js"],"names":["socket","createContext","React","useState","useEffect","CalculatorContext","localData","localStorage","getItem","initialState","JSON","parse","CalculatorProvider","props","calculations","setCalculations","setItem","stringify","io","on","msg","prevState","Provider","value","sendChat","emit","children","useContext","Calculator","result","setResult","calculate","checkResult","includes","replace","output","eval","calculation","calculationString","e","reset","backspace","slice","onClick","button","Result","className","KeyPad","onButtonClick","target","name","MessageWrapper","Styled","div","MessageDisplay","DisplayCalculations","map","i","key","DisplayContainer","App","align","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.272fafe2.chunk.js","sourcesContent":["import React from \"react\";\nimport io from \"socket.io-client\";\nimport { SOCKET_ENDPOINT_PROD } from \"../config\";\n\nconst { createContext, useState, useEffect } = React;\n\nconst CalculatorContext = createContext();\n\nlet socket;\n\nconst localData = localStorage.getItem(\"calculations\");\nconst initialState = localData ? JSON.parse(localData) : [];\n\nconst CalculatorProvider = (props) => {\n  // initially load previous calculations from localstorage\n  const [calculations, setCalculations] = useState(initialState);\n\n  useEffect(() => {\n    localStorage.setItem(\"calculations\", JSON.stringify(calculations));\n  }, [calculations]);\n\n  useEffect(() => {\n    socket = io(SOCKET_ENDPOINT_PROD);\n    socket.on(\"chat\", function (msg) {\n      setCalculations((prevState) => {\n        return [msg, ...prevState];\n      });\n    });\n  }, []);\n\n  const sendChat = (msg) => {\n    socket.emit(\"chat\", msg);\n  };\n\n  return (\n    <CalculatorContext.Provider\n      value={{\n        calculations,\n        sendChat,\n      }}\n    >\n      {props.children}\n    </CalculatorContext.Provider>\n  );\n};\n\nexport { CalculatorContext, CalculatorProvider };\n","const SOCKET_ENDPOINT_DEV = \"http://127.0.0.1:4001\";\n\nconst SOCKET_ENDPOINT_PROD = \"https://ancient-plateau-64473.herokuapp.com\";\n\nexport { SOCKET_ENDPOINT_DEV, SOCKET_ENDPOINT_PROD };\n","import React from \"react\";\nimport Result from \"./Result\";\nimport KeyPad from \"./KeyPad\";\nimport { CalculatorContext } from \"../../context/CalculatorContext\";\n\nconst { useContext, useState } = React;\n\nconst Calculator = () => {\n  const { sendChat } = useContext(CalculatorContext);\n  const [result, setResult] = useState(\"\");\n  const calculate = () => {\n    var checkResult = \"\";\n    if (result.includes(\"--\")) {\n      checkResult = result.replace(\"--\", \"+\");\n    } else {\n      checkResult = result;\n    }\n    try {\n      // eslint-disable-next-line no-eval\n      const output = (eval(checkResult) || \"\") + \"\";\n      const calculation = result;\n      const calculationString = `${calculation} = ${output}`;\n      setResult(output);\n      sendChat(calculationString);\n    } catch (e) {\n      setResult(\"error\");\n    }\n  };\n  const reset = () => {\n    setResult(\"\");\n  };\n  const backspace = () => {\n    setResult(result.slice(0, -1));\n  };\n  const onClick = (button) => {\n    if (button === \"=\") {\n      calculate();\n    } else if (button === \"C\") {\n      reset();\n    } else if (button === \"CE\") {\n      backspace();\n    } else {\n      setResult(result + button);\n    }\n  };\n  return (\n    <div>\n      <Result result={result} />\n      <KeyPad onClick={onClick} />\n    </div>\n  );\n};\n\nexport default Calculator;\n","import React from \"react\";\n\nconst Result = ({ result }) => {\n  return (\n    <div className=\"result\">\n      <p>{result}</p>\n    </div>\n  );\n};\n\nexport default Result;\n","import React from \"react\";\n\nconst KeyPad = ({ onClick }) => {\n  const onButtonClick = (e) => {\n    onClick(e.target.name);\n  };\n  return (\n    <div className=\"button\">\n      <button name=\"(\" onClick={onButtonClick}>\n        (\n      </button>\n      <button name=\"CE\" onClick={onButtonClick}>\n        CE\n      </button>\n      <button name=\")\" onClick={onButtonClick}>\n        )\n      </button>\n      <button name=\"C\" onClick={onButtonClick}>\n        C\n      </button>\n      <br />\n\n      <button name=\"1\" onClick={onButtonClick}>\n        1\n      </button>\n      <button name=\"2\" onClick={onButtonClick}>\n        2\n      </button>\n      <button name=\"3\" onClick={onButtonClick}>\n        3\n      </button>\n      <button name=\"+\" onClick={onButtonClick}>\n        +\n      </button>\n      <br />\n\n      <button name=\"4\" onClick={onButtonClick}>\n        4\n      </button>\n      <button name=\"5\" onClick={onButtonClick}>\n        5\n      </button>\n      <button name=\"6\" onClick={onButtonClick}>\n        6\n      </button>\n      <button name=\"-\" onClick={onButtonClick}>\n        -\n      </button>\n      <br />\n\n      <button name=\"7\" onClick={onButtonClick}>\n        7\n      </button>\n      <button name=\"8\" onClick={onButtonClick}>\n        8\n      </button>\n      <button name=\"9\" onClick={onButtonClick}>\n        9\n      </button>\n      <button name=\"*\" onClick={onButtonClick}>\n        x\n      </button>\n      <br />\n\n      <button name=\".\" onClick={onButtonClick}>\n        .\n      </button>\n      <button name=\"0\" onClick={onButtonClick}>\n        0\n      </button>\n      <button name=\"=\" onClick={onButtonClick}>\n        =\n      </button>\n      <button name=\"/\" onClick={onButtonClick}>\n        รท\n      </button>\n      <br />\n    </div>\n  );\n};\n\nexport default KeyPad;\n","import React from \"react\";\nimport Styled from \"styled-components\";\nimport { CalculatorContext } from \"../../context/CalculatorContext\";\n\nconst { useContext } = React;\n\nconst MessageWrapper = Styled.div`\n  overflow-x: hidden;\n`;\n\nconst MessageDisplay = Styled.div`\n  width: 100%;\n  height: 50px;\n  padding: 20px 0 0 20px;\n  text-align: left;\n  font-size: 16px;\n  font-weight: bold;\n  border-top: 1px solid black;\n  @media (max-width: 500px) {\n    width: 100%;\n    max-height: 200px;\n  }\n`;\n\nconst DisplayCalculations = () => {\n  const { calculations } = useContext(CalculatorContext);\n  return (\n    <MessageWrapper>\n      {calculations.slice(0, 10).map((calculation, i) => (\n        <MessageDisplay value={calculation} key={i}>\n          {calculation}\n        </MessageDisplay>\n      ))}\n    </MessageWrapper>\n  );\n};\n\nexport default DisplayCalculations;\n","import React from \"react\";\nimport \"./App.css\";\nimport Calculator from \"./components/Calculator/Calculator\";\nimport { CalculatorProvider } from \"./context/CalculatorContext\";\nimport DisplayCalculations from \"./components/Result/DisplayCalculations\";\nimport Styled from \"styled-components\";\n\nconst DisplayContainer = Styled.div`\n    margin-top: 20px;\n`;\n\nfunction App() {\n  return (\n    <CalculatorProvider>\n      <h1 align=\"center\"> Sezzle calculator </h1>\n      <div className=\"calculator-body\">\n        <Calculator />\n      </div>\n      <DisplayContainer>\n        <DisplayCalculations />\n      </DisplayContainer>\n    </CalculatorProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}